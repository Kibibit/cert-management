---
description: MCP Services Configuration for CursorRIPER.sigma
globs: 
alwaysApply: true
---

# CursorRIPER‚ô¶Œ£ MCP Services Configuration

## üõ†Ô∏è MCP Services Selection
# Uncomment the services you want to use and ensure the corresponding MCP server is installed
# All services will follow the CursorRIPER‚ô¶Œ£ permission model and symbolic notation

## üéØ Active MCPs (enable in Cursor as needed)
- Playwright: `.cursor/rules/mcp-playwright.mdc` (browser automation/testing)
- lsmcp: `.cursor/rules/mcp-lsmcp.mdc` (TypeScript LSP workflow and discipline)
- Atlassian (read-first): Confluence/Jira investigation; escalate to full only when writes are explicitly needed
- GCP: on‚Äëdemand environments and logs

## üß≠ Usage Guidance (proxy governs tool/read/write exposure)
- lsmcp workflow: verify reality ‚Üí check impact ‚Üí minimal coherent edit ‚Üí diagnostics clean ‚Üí finish. No undefined symbols/imports; fix diagnostics before final edits.
- Playwright: author and validate E2E; keep suites stable (avoid committing debug-only steps).
- Atlassian: prefer the read‚Äëonly proxy entry by default; use full only per task requirement.
- GCP: keep queries scoped to target projects/environments
- GitHub: use `gh` CLI for repo/PR/issues; `GITHUB_TOKEN` is present in the environment.

## üîó Available MCP Services

# This file serves as a central configuration point for all MCP services in CursorRIPER‚ô¶Œ£.
# To enable a service, uncomment its @file line above.
# To disable a service, comment out its @file line above.
# Each service follows the CursorRIPER‚ô¶Œ£ permission model and respects RIPER modes.

## ‚öôÔ∏è Setup Instructions

# 1. Ensure you have the desired MCP servers installed
# 2. Configure .cursor/mcp.json with appropriate server settings
# 3. Enable only Playwright, lsmcp, Atlassian‚Äëread, and GCP by default in Cursor
# 4. Restart Cursor to apply changes

## üìã MCP Server Requirements

# Filesystem: npm install -g @modelcontextprotocol/server-filesystem
# Web Search: npm install -g @modelcontextprotocol/server-websearch
# GitHub: npm install -g @modelcontextprotocol/server-github
# Database: npm install -g @modelcontextprotocol/server-database
# AI Model: npm install -g @modelcontextprotocol/server-aimodel
# Data Viz: npm install -g @modelcontextprotocol/server-dataviz
# API Tools: npm install -g @modelcontextprotocol/server-apitools

# See full MCP documentation at: https://modelcontextprotocol.github.io/
