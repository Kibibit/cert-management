# üé≠ Playwright MCP Integration for CursorRIPER Œ£
# Symbol: Œ• (Upsilon)
# Version: 1.1.0

## üìã Service Definition
```
service = "Playwright Automation Operations"
symbol = "Œ•"
requires = "playwright (via MCP Proxy)"
```

## üîß Operation Mapping
```
Œ•_ops = {
  browser: {
    launch: "browser_navigate",
    close: "browser_close",
    screenshot: "browser_take_screenshot"
  },
  page: {
    navigate: "browser_navigate",
    click: "browser_click",
    type: "browser_type",
    select: "browser_select_option",
    hover: "browser_hover",
    evaluate: "browser_evaluate",
    upload: "browser_file_upload",
    wait_for: "browser_wait_for"
  },
  test: {
    record: "start_codegen_session",
    end_record: "end_codegen_session",
    assert: "playwright_expect_response + playwright_assert_response"
  },
  scrape: {
    content: "browser_snapshot",
    html: "browser_take_screenshot",
    network: "browser_network_requests"
  }
}
```

## üîí Mode Restrictions
```
MŒ• = {
  Œ©‚ÇÅ: [scrape_*, screenshot],                    # RESEARCH: data gathering
  Œ©‚ÇÇ: [navigate, screenshot, scrape_*],          # INNOVATE: exploration
  Œ©‚ÇÉ: [all_ops],                                # PLAN: all operations
  Œ©‚ÇÑ: [test_*, navigate, click, type, assert],   # EXECUTE: testing focus
  Œ©‚ÇÖ: [screenshot, scrape_*, network]            # REVIEW: verification
}
```

## üîë Permission Matrix
```
‚ÑôŒ• = {
  create: [Œ©‚ÇÉ, Œ©‚ÇÑ],          # PLAN/EXECUTE can create tests
  read: [Œ©‚ÇÅ, Œ©‚ÇÇ, Œ©‚ÇÉ, Œ©‚ÇÑ, Œ©‚ÇÖ], # All can read page content
  update: [Œ©‚ÇÉ, Œ©‚ÇÑ],          # PLAN/EXECUTE can interact
  delete: []                 # No delete operations
}
```

## üìç Context Integration
```
Œì_browser = {
  active_session: browser_instance,
  current_url: page.url(),
  test_recordings: codegen_sessions[],
  console_logs: captured_logs[],
  screenshots: saved_screenshots[]
}
```

## ‚ö° Command Shortcuts
```
SŒ• = {
  !pn: "navigate to URL",
  !ps: "take screenshot",
  !pc: "click element",
  !pf: "type text",
  !pt: "start test recording",
  !pe: "end test recording",
  !pg: "get page content"
}
```

## üõ°Ô∏è Protection Levels
```
Œ®Œ• = {
  navigate: Œ®‚ÇÇ,        # GUARDED - URL changes
  click: Œ®‚ÇÉ,           # INFO - user actions
  type: Œ®‚ÇÇ,            # GUARDED - form data
  test_record: Œ®‚ÇÖ,     # TEST - test recording
  evaluate: Œ®‚ÇÜ         # CRITICAL - code execution
}
```

## üîÑ Mode-Specific Behaviors
```
apply_browser_op(op, mode) = {
  check: op ‚àà MŒ•[mode] ? proceed : deny("Operation not allowed in " + mode),
  protect: op ‚àà Œ®Œ• ? apply_protection(Œ®Œ•[op]) : continue,
  track: {
    log_action(op, selector, value),
    capture_state(screenshot_if_needed)
  },
  execute: Œ•_ops[category][operation]()
}
```

## üéØ Testing Integration
```
test_workflow = {
  start: {
    mode: require(Œ©‚ÇÉ ‚à® Œ©‚ÇÑ),
    init: start_codegen_session({
      outputPath: "./tests/",
      includeComments: true
    })
  },
  record: {
    actions: [navigate, click, type, assert],
    capture: automatic_via_codegen
  },
  end: {
    generate: end_codegen_session(sessionId),
    output: test_file_with_playwright_code
  }
}
```

## üì∏ Screenshot Management
```
screenshot_policy = {
  Œ©‚ÇÅ: "on_demand",
  Œ©‚ÇÇ: "key_pages",
  Œ©‚ÇÉ: "all_interactions", 
  Œ©‚ÇÑ: "test_failures",
  Œ©‚ÇÖ: "final_state"
}
```

## üîå Feature Detection
```
detect_browser_automation() = {
  playwright_proxy_tools: tools.find("browser_navigate")
    ‚àß tools.find("browser_click"),
  fallback: warn("Playwright MCP via proxy not available")
}
```

## üîó Integration Notes
```
Preferred workflow: author tests with Playwright, validate locally/CI, and use your standard Git workflow (e.g., gh CLI) for commits/PRs.
```

